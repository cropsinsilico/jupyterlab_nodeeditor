[build-system]
requires = [
    "hatchling>=1.5.0",
    "jupyterlab>=4.0.0,<5",
    "hatch-nodejs-version",
]
build-backend = "hatchling.build"

[project]
name = "jupyterlab_nodeeditor"
readme = "README.md"
requires-python = ">=3.8"
classifiers = [
    "Framework :: Jupyter",
    "Framework :: Jupyter :: JupyterLab",
    "Framework :: Jupyter :: JupyterLab :: 4",
    "Framework :: Jupyter :: JupyterLab :: Extensions",
    "Framework :: Jupyter :: JupyterLab :: Extensions :: Prebuilt",
    "License :: OSI Approved :: BSD License",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
]
dependencies = [
    "jupyter_server>=2.0.1,<3",
    "ipywidgets>=8.0"
]
dynamic = [
    "version",
    "description",
    "authors",
    "urls",
    "keywords",
]

[project.license]
file = "LICENSE"

[tool.hatch.version]
source = "nodejs"

[tool.hatch.metadata.hooks.nodejs]
fields = [
    "description",
    "authors",
    "urls",
]

[tool.hatch.build.targets.sdist]
artifacts = [
    "jupyterlab_nodeeditor/labextension",
]
exclude = [
    ".github",
    "binder",
]

[tool.hatch.build.targets.wheel.shared-data]
"jupyterlab_nodeeditor/labextension" = "share/jupyter/labextensions/jupyterlab_nodeeditor"
"install.json" = "share/jupyter/labextensions/jupyterlab_nodeeditor/install.json"
"jupyter-config/server-config" = "etc/jupyter/jupyter_server_config.d"

[tool.hatch.build.hooks.version]
path = "jupyterlab_nodeeditor/_version.py"

[tool.hatch.build.hooks.jupyter-builder]
dependencies = [
    "hatch-jupyter-builder>=0.5",
]
build-function = "hatch_jupyter_builder.npm_builder"
ensured-targets = [
    "jupyterlab_nodeeditor/labextension/static/style.js",
    "jupyterlab_nodeeditor/labextension/package.json",
]
skip-if-exists = [
    "jupyterlab_nodeeditor/labextension/static/style.js",
]

[tool.hatch.build.hooks.jupyter-builder.build-kwargs]
build_cmd = "build:prod"
npm = [
    "jlpm",
]

[tool.hatch.build.hooks.jupyter-builder.editable-build-kwargs]
build_cmd = "install:extension"
npm = [
    "jlpm",
]
source_dir = "src"
build_dir = "jupyterlab_nodeeditor/labextension"

[tool.jupyter-releaser.options]
version_cmd = "hatch version"

[tool.jupyter-releaser.hooks]
before-build-npm = [
    "python -m pip install 'jupyterlab>=4.0.0,<5'",
    "jlpm",
    "jlpm build:prod",
]
before-build-python = [
    "jlpm clean:all",
]

[tool.check-wheel-contents]
ignore = [
    "W002",
]

[tool.black]
line-length = 88
target-version = [
  'py36',
  'py37',
  'py38',
]
include = '\.pyi?$'
exclude = '''
/(
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | build
  | dist
)/
'''


[tool.ruff]
exclude = [
    "doc",
    "benchmarks",
    "*/api.py",
    "*/__init__.py",
    "*/__config__.py",
    "yt/units",
    "yt/frontends/stream/sample_data",
    "yt/visualization/_mpl_imports.py",
    "yt/utilities/fits_image.py",
    "yt/utilities/lodgeit.py",
    "yt/mods.py",
    "yt/visualization/_colormap_data.py",
]
select = [
    "E",
    "F",
    "W",
    "C4",   # flake8-comprehensions
    "B",    # flake8-bugbear
    "G",    # flake8-logging-format
    "YTT",  # flake8-2020
    "UP",   # pyupgrade
    "I",    # isort
]
ignore = [
    "E501",  # line too long
    "E741",  # Do not use variables named 'I', 'O', or 'l'
    "B018",  # Found useless expression. # disabled because ds.index is idiomatic
]

[tool.ruff.isort]
combine-as-imports = true
known-third-party = [
  "IPython",
  "yggdrasil",
  "yaml",
]
